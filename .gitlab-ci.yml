stages:
- test

variables:
    BUNDLE: "org.gnome.Shotwell.Devel.flatpak"
    GIT_SUBMODULE_STRATEGY: recursive

flatpak:
    tags:
        - flatpak
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:3.36
    stage: test
    variables:
        MANIFEST_PATH: "flatpak/org.gnome.Shotwell.json"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome.flatpakrepo"
        # Replace with your application name, as written in the manifest
        FLATPAK_MODULE: "shotwell"
        # Make sure to keep this in sync with the Flatpak manifest, all arguments
        # are passed except the config-args because we build it ourselves
        CONFIGURE_ARGS: "-Dudev=false -Dinstall-apport-hook=false -Dface-detection=true -Dface_detection_helper_bus=private"
        DBUS_ID: "org.gnome.Shotwell"

    script:
        - flatpak-builder --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} app ${MANIFEST_PATH}

        # Make sure to keep this in sync with the Flatpak manifest, all arguments
        # are passed except the config-args because we build it ourselves
        - flatpak build app meson --prefix=/app ${CONFIGURE_ARGS} _build
        - flatpak build app ninja -C _build install

        - flatpak-builder --user --disable-rofiles-fuse --finish-only --repo=repo app ${MANIFEST_PATH}

        # Run automatic tests inside the Flatpak env
        #- xvfb-run -a -s "-screen 0 1024x768x24" flatpak build app ninja -C _build test
        - flatpak build app ninja -C _build test

        # Generate a Flatpak bundle
        - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${DBUS_ID}

    artifacts:
        paths:
            - ${BUNDLE}
            - _build/meson-logs/meson-log.txt
            - _build/meson-logs/testlog.txt
        expire_in: 2 days
    cache:
        paths:
            - .flatpak-builder/downloads
            - .flatpak-builder/git
