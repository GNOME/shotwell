/* libgdata.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "GData", gir_namespace = "GData", gir_version = "0.0", lower_case_cprefix = "gdata_")]
namespace GData {
	namespace ContactsGender {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GENDER_FEMALE")]
		public const string FEMALE;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GENDER_MALE")]
		public const string MALE;
	}
	namespace ContactsGroupType {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GROUP_CONTACTS")]
		public const string CONTACTS;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GROUP_COWORKERS")]
		public const string COWORKERS;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GROUP_FAMILY")]
		public const string FAMILY;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_GROUP_FRIENDS")]
		public const string FRIENDS;
	}
	namespace ContactsPriority {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_PRIORITY_HIGH")]
		public const string HIGH;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_PRIORITY_LOW")]
		public const string LOW;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_PRIORITY_NORMAL")]
		public const string NORMAL;
	}
	namespace ContactsSensitivity {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_SENSITIVITY_CONFIDENTIAL")]
		public const string CONFIDENTIAL;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_SENSITIVITY_NORMAL")]
		public const string NORMAL;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_SENSITIVITY_PERSONAL")]
		public const string PERSONAL;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CONTACTS_SENSITIVITY_PRIVATE")]
		public const string PRIVATE;
	}
	namespace DocumentsPresentationFormat {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_PRESENTATION_PDF")]
		public const string PDF;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_PRESENTATION_PNG")]
		public const string PNG;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_PRESENTATION_PPT")]
		public const string PPT;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_PRESENTATION_SWF")]
		public const string SWF;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_PRESENTATION_TXT")]
		public const string TXT;
	}
	namespace DocumentsSpreadsheetFormat {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_CSV")]
		public const string CSV;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_HTML")]
		public const string HTML;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_ODS")]
		public const string ODS;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_PDF")]
		public const string PDF;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_TSV")]
		public const string TSV;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_SPREADSHEET_XLS")]
		public const string XLS;
	}
	namespace DocumentsTextFormat {
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_DOC")]
		public const string DOC;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_HTML")]
		public const string HTML;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_JPEG")]
		public const string JPEG;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_ODT")]
		public const string ODT;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_PDF")]
		public const string PDF;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_PNG")]
		public const string PNG;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_RTF")]
		public const string RTF;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_TXT")]
		public const string TXT;
		[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_TEXT_ZIP")]
		public const string ZIP;
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_app_categories_get_type ()")]
	public class APPCategories : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected APPCategories ();
		public unowned GLib.List<GData.Category> get_categories ();
		[NoAccessorMethod]
		public bool is_fixed { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_access_rule_get_type ()")]
	public class AccessRule : GData.Entry {
		[CCode (has_construct_function = false)]
		public AccessRule (string id);
		public int64 get_edited ();
		public unowned string get_key ();
		public unowned string get_role ();
		public void get_scope (out unowned string type, out unowned string value);
		public void set_role (string role);
		public void set_scope (string type, string? value);
		public int64 edited { get; }
		public string key { get; }
		public string role { get; set; }
		[NoAccessorMethod]
		public string scope_type { owned get; set; }
		[NoAccessorMethod]
		public string scope_value { owned get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_author_get_type ()")]
	public class Author : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public Author (string name, string? uri, string? email_address);
		public unowned string get_email_address ();
		public unowned string get_name ();
		public unowned string get_uri ();
		public void set_email_address (string? email_address);
		public void set_name (string name);
		public void set_uri (string? uri);
		public string email_address { get; set; }
		public string name { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_authorization_domain_get_type ()")]
	public class AuthorizationDomain : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AuthorizationDomain ();
		public unowned string get_scope ();
		public unowned string get_service_name ();
		public string scope { get; construct; }
		public string service_name { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_batch_operation_get_type ()")]
	public class BatchOperation : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BatchOperation ();
		public uint add_deletion (GData.Entry entry, [CCode (scope = "async")] GData.BatchOperationCallback callback);
		public uint add_insertion (GData.Entry entry, [CCode (scope = "async")] GData.BatchOperationCallback callback);
		public uint add_query (string id, GLib.Type entry_type, [CCode (scope = "async")] GData.BatchOperationCallback callback);
		public uint add_update (GData.Entry entry, [CCode (scope = "async")] GData.BatchOperationCallback callback);
		public unowned GData.AuthorizationDomain? get_authorization_domain ();
		public unowned string get_feed_uri ();
		public unowned GData.Service get_service ();
		public bool run (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool run_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.AuthorizationDomain authorization_domain { get; construct; }
		public string feed_uri { get; construct; }
		public GData.Service service { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_access_rule_get_type ()")]
	public class CalendarAccessRule : GData.AccessRule {
		[CCode (has_construct_function = false)]
		public CalendarAccessRule (string id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_calendar_get_type ()")]
	public class CalendarCalendar : GData.Entry, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public CalendarCalendar (string? id);
		public unowned string get_access_level ();
		public GData.Color get_color ();
		public int64 get_edited ();
		public uint get_times_cleaned ();
		public unowned string get_timezone ();
		public void set_color (GData.Color color);
		public void set_is_hidden (bool is_hidden);
		public void set_is_selected (bool is_selected);
		public void set_timezone (string? _timezone);
		public string access_level { get; }
		public GData.Color color { get; set; }
		public int64 edited { get; }
		[NoAccessorMethod]
		public bool is_hidden { get; set; }
		[NoAccessorMethod]
		public bool is_selected { get; set; }
		public uint times_cleaned { get; }
		public string timezone { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_event_get_type ()")]
	public class CalendarEvent : GData.Entry {
		[CCode (has_construct_function = false)]
		public CalendarEvent (string? id);
		public void add_person (GData.GDWho who);
		public void add_place (GData.GDWhere where);
		public void add_time (GData.GDWhen when);
		public bool get_anyone_can_add_self ();
		public int64 get_edited ();
		public bool get_guests_can_invite_others ();
		public bool get_guests_can_modify ();
		public bool get_guests_can_see_guests ();
		public void get_original_event_details (out string event_id, out string event_uri);
		public unowned GLib.List<GData.GDWho> get_people ();
		public unowned GLib.List<GData.GDWhere> get_places ();
		public bool get_primary_time (out int64 start_time, out int64 end_time, out unowned GData.GDWhen when);
		public unowned string get_recurrence ();
		public uint get_sequence ();
		public unowned string get_status ();
		public unowned GLib.List<GData.GDWhen> get_times ();
		public unowned string get_transparency ();
		public unowned string get_uid ();
		public unowned string get_visibility ();
		public bool is_exception ();
		public void set_anyone_can_add_self (bool anyone_can_add_self);
		public void set_guests_can_invite_others (bool guests_can_invite_others);
		public void set_guests_can_modify (bool guests_can_modify);
		public void set_guests_can_see_guests (bool guests_can_see_guests);
		public void set_recurrence (string? recurrence);
		public void set_sequence (uint sequence);
		public void set_status (string? status);
		public void set_transparency (string? transparency);
		public void set_uid (string? uid);
		public void set_visibility (string? visibility);
		public bool anyone_can_add_self { get; set; }
		public int64 edited { get; }
		public bool guests_can_invite_others { get; set; }
		public bool guests_can_modify { get; set; }
		public bool guests_can_see_guests { get; set; }
		[NoAccessorMethod]
		public string original_event_id { owned get; }
		[NoAccessorMethod]
		public string original_event_uri { owned get; }
		public string recurrence { get; set; }
		public uint sequence { get; set; }
		public string status { get; set; }
		public string transparency { get; set; }
		public string uid { get; set; }
		public string visibility { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_feed_get_type ()")]
	public class CalendarFeed : GData.Feed {
		[CCode (has_construct_function = false)]
		protected CalendarFeed ();
		public uint get_times_cleaned ();
		public unowned string get_timezone ();
		public uint times_cleaned { get; }
		public string timezone { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_query_get_type ()")]
	public class CalendarQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public CalendarQuery (string? q);
		public bool get_future_events ();
		public uint get_max_attendees ();
		public unowned string get_order_by ();
		public int64 get_recurrence_expansion_end ();
		public int64 get_recurrence_expansion_start ();
		public bool get_single_events ();
		public unowned string get_sort_order ();
		public int64 get_start_max ();
		public int64 get_start_min ();
		public unowned string get_timezone ();
		public void set_future_events (bool future_events);
		public void set_max_attendees (uint max_attendees);
		public void set_order_by (string? order_by);
		public void set_recurrence_expansion_end (int64 end);
		public void set_recurrence_expansion_start (int64 start);
		public void set_show_deleted (bool show_deleted);
		public void set_single_events (bool single_events);
		public void set_sort_order (string? sort_order);
		public void set_start_max (int64 start_max);
		public void set_start_min (int64 start_min);
		public void set_timezone (string? _timezone);
		[CCode (has_construct_function = false)]
		public CalendarQuery.with_limits (string? q, int64 start_min, int64 start_max);
		public bool future_events { get; set; }
		public uint max_attendees { get; set; }
		public string order_by { get; set; }
		public int64 recurrence_expansion_end { get; set; }
		public int64 recurrence_expansion_start { get; set; }
		[NoAccessorMethod]
		public bool show_deleted { get; set; }
		public bool single_events { get; set; }
		public string sort_order { get; set; }
		public int64 start_max { get; set; }
		public int64 start_min { get; set; }
		public string timezone { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_calendar_service_get_type ()")]
	public class CalendarService : GData.Service, GData.Batchable {
		[CCode (has_construct_function = false)]
		public CalendarService (GData.Authorizer? authorizer);
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.CalendarEvent insert_calendar_event (GData.CalendarCalendar calendar, GData.CalendarEvent event, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_calendar_event_async (GData.CalendarCalendar calendar, GData.CalendarEvent event, GLib.Cancellable? cancellable);
		public GData.CalendarEvent insert_event (GData.CalendarEvent event, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_event_async (GData.CalendarEvent event, GLib.Cancellable? cancellable);
		public GData.Feed query_all_calendars (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_all_calendars_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_events (GData.CalendarCalendar calendar, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_events_async (GData.CalendarCalendar calendar, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_own_calendars (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_own_calendars_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_category_get_type ()")]
	public class Category : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public Category (string term, string? scheme, string? label);
		public unowned string get_label ();
		public unowned string get_scheme ();
		public unowned string get_term ();
		public void set_label (string? label);
		public void set_scheme (string? scheme);
		public void set_term (string term);
		public string label { get; set; }
		public string scheme { get; set; }
		public string term { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_client_login_authorizer_get_type ()")]
	public class ClientLoginAuthorizer : GLib.Object, GData.Authorizer {
		[CCode (has_construct_function = false)]
		public ClientLoginAuthorizer (string client_id, GLib.Type service_type);
		public bool authenticate (string username, string password, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool authenticate_async (string username, string password, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public ClientLoginAuthorizer.for_authorization_domains (string client_id, GLib.List<GData.AuthorizationDomain> authorization_domains);
		public unowned string get_client_id ();
		public unowned string get_password ();
		public unowned GLib.ProxyResolver? get_proxy_resolver ();
		public Soup.URI get_proxy_uri ();
		public uint get_timeout ();
		public unowned string get_username ();
		public void set_proxy_resolver (GLib.ProxyResolver? proxy_resolver);
		public void set_proxy_uri (Soup.URI? proxy_uri);
		public void set_timeout (uint timeout);
		public string client_id { get; construct; }
		public string password { get; }
		public GLib.ProxyResolver proxy_resolver { get; set; }
		public Soup.URI proxy_uri { owned get; set; }
		public uint timeout { get; set; }
		public string username { get; }
		public signal string captcha_challenge (string uri);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_comment_get_type ()")]
	public abstract class Comment : GData.Entry {
		[CCode (has_construct_function = false)]
		protected Comment ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_contacts_contact_get_type ()")]
	public class ContactsContact : GData.Entry {
		[CCode (has_construct_function = false)]
		public ContactsContact (string? id);
		public void add_calendar (GData.GContactCalendar calendar);
		public void add_email_address (GData.GDEmailAddress email_address);
		public void add_event (GData.GContactEvent event);
		public void add_external_id (GData.GContactExternalID external_id);
		public void add_group (string href);
		public void add_hobby (string hobby);
		public void add_im_address (GData.GDIMAddress im_address);
		public void add_jot (GData.GContactJot jot);
		public void add_language (GData.GContactLanguage language);
		public void add_organization (GData.GDOrganization organization);
		public void add_phone_number (GData.GDPhoneNumber phone_number);
		public void add_postal_address (GData.GDPostalAddress postal_address);
		public void add_relation (GData.GContactRelation relation);
		public void add_website (GData.GContactWebsite website);
		public unowned string get_billing_information ();
		public bool get_birthday (out GLib.Date birthday);
		public unowned GLib.List<GData.GContactCalendar> get_calendars ();
		public unowned string get_directory_server ();
		public int64 get_edited ();
		public unowned GLib.List<GData.GDEmailAddress> get_email_addresses ();
		public unowned GLib.List<GData.GContactEvent> get_events ();
		public unowned GLib.HashTable<void*,void*> get_extended_properties ();
		public unowned string get_extended_property (string name);
		public unowned GLib.List<GData.GContactExternalID> get_external_ids ();
		public unowned string get_file_as ();
		public unowned string get_gender ();
		public GLib.List<weak string> get_groups ();
		public unowned GLib.List<string> get_hobbies ();
		public unowned GLib.List<GData.GDIMAddress> get_im_addresses ();
		public unowned string get_initials ();
		public unowned GLib.List<GData.GContactJot> get_jots ();
		public unowned GLib.List<GData.GContactLanguage> get_languages ();
		public unowned string get_maiden_name ();
		public unowned string get_mileage ();
		public unowned GData.GDName get_name ();
		public unowned string get_nickname ();
		public unowned string get_occupation ();
		public unowned GLib.List<GData.GDOrganization> get_organizations ();
		public unowned GLib.List<GData.GDPhoneNumber> get_phone_numbers ();
		[CCode (array_length_pos = 1.5, array_length_type = "gsize")]
		public uint8[] get_photo (GData.ContactsService service, out string content_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length_pos = 1.1)]
		public async uint8[] get_photo_async (GData.ContactsService service, out string content_type) throws GLib.Error;
		public unowned string get_photo_etag ();
		public unowned GLib.List<GData.GDPostalAddress> get_postal_addresses ();
		public unowned GData.GContactCalendar get_primary_calendar ();
		public unowned GData.GDEmailAddress get_primary_email_address ();
		public unowned GData.GDIMAddress get_primary_im_address ();
		public unowned GData.GDOrganization get_primary_organization ();
		public unowned GData.GDPhoneNumber get_primary_phone_number ();
		public unowned GData.GDPostalAddress get_primary_postal_address ();
		public unowned GData.GContactWebsite get_primary_website ();
		public unowned string get_priority ();
		public unowned GLib.List<GData.GContactRelation> get_relations ();
		public unowned string get_sensitivity ();
		public unowned string get_short_name ();
		public unowned string get_subject ();
		public unowned string get_user_defined_field (string name);
		public unowned GLib.HashTable<void*,void*> get_user_defined_fields ();
		public unowned GLib.List<GData.GContactWebsite> get_websites ();
		public bool is_deleted ();
		public bool is_group_deleted (string href);
		public void remove_all_calendars ();
		public void remove_all_email_addresses ();
		public void remove_all_events ();
		public void remove_all_external_ids ();
		public void remove_all_hobbies ();
		public void remove_all_im_addresses ();
		public void remove_all_jots ();
		public void remove_all_languages ();
		public void remove_all_organizations ();
		public void remove_all_phone_numbers ();
		public void remove_all_postal_addresses ();
		public void remove_all_relations ();
		public void remove_all_websites ();
		public void remove_group (string href);
		public void set_billing_information (string? billing_information);
		public void set_birthday (GLib.Date? birthday, bool birthday_has_year);
		public void set_directory_server (string? directory_server);
		public bool set_extended_property (string name, string? value);
		public void set_file_as (string? file_as);
		public void set_gender (string? gender);
		public void set_initials (string? initials);
		public void set_maiden_name (string? maiden_name);
		public void set_mileage (string? mileage);
		public void set_name (GData.GDName name);
		public void set_nickname (string? nickname);
		public void set_occupation (string? occupation);
		public bool set_photo (GData.ContactsService service, uint8? data, size_t length, string? content_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_photo_async (GData.ContactsService service, uint8? data, size_t length, string? content_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_priority (string? priority);
		public void set_sensitivity (string? sensitivity);
		public void set_short_name (string? short_name);
		public void set_subject (string? subject);
		public void set_user_defined_field (string name, string? value);
		public string billing_information { get; set; }
		[NoAccessorMethod]
		public GLib.Date birthday { get; set; }
		[NoAccessorMethod]
		public bool birthday_has_year { get; set; }
		[NoAccessorMethod]
		public bool deleted { get; }
		public string directory_server { get; set; }
		public int64 edited { get; }
		public string file_as { get; set; }
		public string gender { get; set; }
		public string initials { get; set; }
		public string maiden_name { get; set; }
		public string mileage { get; set; }
		public GData.GDName name { get; set; }
		public string nickname { get; set; }
		public string occupation { get; set; }
		public string photo_etag { get; }
		public string priority { get; set; }
		public string sensitivity { get; set; }
		public string short_name { get; set; }
		public string subject { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_contacts_group_get_type ()")]
	public class ContactsGroup : GData.Entry {
		[CCode (has_construct_function = false)]
		public ContactsGroup (string? id);
		public int64 get_edited ();
		public unowned GLib.HashTable<void*,void*> get_extended_properties ();
		public unowned string get_extended_property (string name);
		public unowned string get_system_group_id ();
		public bool is_deleted ();
		public bool set_extended_property (string name, string? value);
		[NoAccessorMethod]
		public bool deleted { get; }
		public int64 edited { get; }
		public string system_group_id { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_contacts_query_get_type ()")]
	public class ContactsQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public ContactsQuery (string? q);
		public unowned string get_group ();
		public unowned string get_order_by ();
		public unowned string get_sort_order ();
		public void set_group (string? group);
		public void set_order_by (string? order_by);
		public void set_show_deleted (bool show_deleted);
		public void set_sort_order (string? sort_order);
		[CCode (has_construct_function = false)]
		public ContactsQuery.with_limits (string? q, uint start_index, uint max_results);
		public string group { get; set; }
		public string order_by { get; set; }
		[NoAccessorMethod]
		public bool show_deleted { get; set; }
		public string sort_order { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_contacts_service_get_type ()")]
	public class ContactsService : GData.Service, GData.Batchable {
		[CCode (has_construct_function = false)]
		public ContactsService (GData.Authorizer? authorizer);
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.ContactsContact insert_contact (GData.ContactsContact contact, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_contact_async (GData.ContactsContact contact, GLib.Cancellable? cancellable);
		public GData.ContactsGroup insert_group (GData.ContactsGroup group, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_group_async (GData.ContactsGroup group, GLib.Cancellable? cancellable);
		public GData.Feed query_contacts (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_contacts_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_groups (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_groups_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_access_rule_get_type ()")]
	public class DocumentsAccessRule : GData.AccessRule {
		[CCode (has_construct_function = false)]
		public DocumentsAccessRule (string id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_document_get_type ()")]
	public class DocumentsDocument : GData.DocumentsEntry, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsDocument (string? id);
		public GData.DownloadStream download (GData.DocumentsService service, string export_format, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string? get_download_uri (string export_format);
		public unowned string? get_thumbnail_uri ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_drawing_get_type ()")]
	public class DocumentsDrawing : GData.DocumentsDocument, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsDrawing (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_entry_get_type ()")]
	public abstract class DocumentsEntry : GData.Entry, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		protected DocumentsEntry ();
		public unowned string get_document_id ();
		public int64 get_edited ();
		public unowned GData.Author get_last_modified_by ();
		public int64 get_last_viewed ();
		public string get_path ();
		public int64 get_quota_used ();
		public unowned string get_resource_id ();
		public void set_writers_can_invite (bool writers_can_invite);
		public string document_id { get; }
		public int64 edited { get; }
		[NoAccessorMethod]
		public bool is_deleted { get; set; }
		public GData.Author last_modified_by { get; }
		public int64 last_viewed { get; }
		public int64 quota_used { get; }
		public string resource_id { get; }
		[NoAccessorMethod]
		public bool writers_can_invite { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_feed_get_type ()")]
	public class DocumentsFeed : GData.Feed {
		[CCode (has_construct_function = false)]
		protected DocumentsFeed ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_folder_get_type ()")]
	public class DocumentsFolder : GData.DocumentsEntry, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsFolder (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_pdf_get_type ()")]
	public class DocumentsPdf : GData.DocumentsDocument, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsPdf (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_presentation_get_type ()")]
	public class DocumentsPresentation : GData.DocumentsDocument, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsPresentation (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_query_get_type ()")]
	public class DocumentsQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public DocumentsQuery (string? q);
		public void add_collaborator (string email_address);
		public void add_reader (string email_address);
		public unowned GLib.List<GData.GDEmailAddress> get_collaborator_addresses ();
		public bool get_exact_title ();
		public unowned string get_folder_id ();
		public unowned GLib.List<GData.GDEmailAddress> get_reader_addresses ();
		public unowned string get_title ();
		public void set_folder_id (string? folder_id);
		public void set_show_deleted (bool show_deleted);
		public void set_show_folders (bool show_folders);
		public void set_title (string? title, bool exact_title);
		[CCode (has_construct_function = false)]
		public DocumentsQuery.with_limits (string? q, uint start_index, uint max_results);
		[NoAccessorMethod]
		public bool exact_title { get; set; }
		public string folder_id { get; set; }
		[NoAccessorMethod]
		public bool show_deleted { get; set; }
		[NoAccessorMethod]
		public bool show_folders { get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_service_get_type ()")]
	public class DocumentsService : GData.Service, GData.Batchable {
		[CCode (has_construct_function = false)]
		public DocumentsService (GData.Authorizer? authorizer);
		public GData.DocumentsEntry add_entry_to_folder (GData.DocumentsEntry entry, GData.DocumentsFolder folder, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.DocumentsEntry add_entry_to_folder_async (GData.DocumentsEntry entry, GData.DocumentsFolder folder, GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.DocumentsDocument copy_document (GData.DocumentsDocument document, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.DocumentsDocument copy_document_async (GData.DocumentsDocument document, GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.DocumentsDocument finish_upload (GData.UploadStream upload_stream) throws GLib.Error;
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public static unowned GData.AuthorizationDomain get_spreadsheet_authorization_domain ();
		public static string get_upload_uri (GData.DocumentsFolder? folder);
		public GData.DocumentsFeed query_documents (GData.DocumentsQuery? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_documents_async (GData.DocumentsQuery? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.DocumentsEntry remove_entry_from_folder (GData.DocumentsEntry entry, GData.DocumentsFolder folder, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.DocumentsEntry remove_entry_from_folder_async (GData.DocumentsEntry entry, GData.DocumentsFolder folder, GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.UploadStream update_document (GData.DocumentsDocument document, string slug, string content_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GData.UploadStream update_document_resumable (GData.DocumentsDocument document, string slug, string content_type, int64 content_length, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GData.UploadStream upload_document (GData.DocumentsDocument? document, string slug, string content_type, GData.DocumentsFolder? folder, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GData.UploadStream upload_document_resumable (GData.DocumentsDocument? document, string slug, string content_type, int64 content_length, GData.DocumentsUploadQuery? query, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_spreadsheet_get_type ()")]
	public class DocumentsSpreadsheet : GData.DocumentsDocument, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsSpreadsheet (string? id);
		public string get_download_uri (string export_format, int gid);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_text_get_type ()")]
	public class DocumentsText : GData.DocumentsDocument, GData.AccessHandler {
		[CCode (has_construct_function = false)]
		public DocumentsText (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_documents_upload_query_get_type ()")]
	public class DocumentsUploadQuery : GLib.Object {
		[CCode (has_construct_function = false)]
		public DocumentsUploadQuery ();
		public string build_uri ();
		public bool get_convert ();
		public unowned GData.DocumentsFolder? get_folder ();
		public void set_convert (bool convert);
		public void set_folder (GData.DocumentsFolder? folder);
		public bool convert { get; set; }
		public GData.DocumentsFolder folder { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_download_stream_get_type ()")]
	public class DownloadStream : GLib.InputStream, GLib.Seekable {
		[CCode (has_construct_function = false, type = "GInputStream*")]
		public DownloadStream (GData.Service service, GData.AuthorizationDomain? domain, string download_uri, GLib.Cancellable? cancellable = null);
		public unowned GData.AuthorizationDomain? get_authorization_domain ();
		public unowned GLib.Cancellable get_cancellable ();
		public ssize_t get_content_length ();
		public unowned string get_content_type ();
		public unowned string get_download_uri ();
		public unowned GData.Service get_service ();
		public GData.AuthorizationDomain authorization_domain { get; construct; }
		public GLib.Cancellable cancellable { get; construct; }
		public long content_length { get; }
		public string content_type { get; }
		public string download_uri { get; construct; }
		public GData.Service service { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_entry_get_type ()")]
	public class Entry : GData.Parsable {
		[CCode (has_construct_function = false)]
		public Entry (string? id);
		public void add_author (GData.Author author);
		public void add_category (GData.Category category);
		public void add_link (GData.Link _link);
		public unowned GLib.List<GData.Author> get_authors ();
		public unowned GLib.List<GData.Category> get_categories ();
		public unowned string get_content ();
		public unowned string get_content_uri ();
		public unowned string get_etag ();
		public unowned string get_id ();
		public int64 get_published ();
		public unowned string get_rights ();
		public unowned string get_summary ();
		public unowned string get_title ();
		public int64 get_updated ();
		public unowned GData.Link look_up_link (string rel);
		public GLib.List<weak GData.Link> look_up_links (string rel);
		public bool remove_link (GData.Link _link);
		public void set_content (string? content);
		public void set_content_uri (string? content_uri);
		public void set_rights (string? rights);
		public void set_summary (string? summary);
		public void set_title (string? title);
		public string content { get; set; }
		public string content_uri { get; set; }
		public string etag { get; construct; }
		public string id { get; construct; }
		[NoAccessorMethod]
		public bool is_inserted { get; }
		public int64 published { get; }
		public string rights { get; set; }
		public string summary { get; set; }
		public string title { get; set; }
		public int64 updated { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_feed_get_type ()")]
	public class Feed : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected Feed ();
		public unowned GLib.List<GData.Author> get_authors ();
		public unowned GLib.List<GData.Category> get_categories ();
		public unowned GLib.List<GData.Entry> get_entries ();
		public unowned string get_etag ();
		public unowned GData.Generator get_generator ();
		public unowned string get_icon ();
		public unowned string get_id ();
		public uint get_items_per_page ();
		public unowned GLib.List<GData.Link> get_links ();
		public unowned string get_logo ();
		public unowned string get_rights ();
		public uint get_start_index ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public uint get_total_results ();
		public int64 get_updated ();
		public unowned GData.Entry look_up_entry (string id);
		public unowned GData.Link look_up_link (string rel);
		public string etag { get; }
		public GData.Generator generator { get; }
		public string icon { get; }
		public string id { get; }
		public uint items_per_page { get; }
		public string logo { get; }
		public string rights { get; }
		public uint start_index { get; }
		public string subtitle { get; }
		public string title { get; }
		public uint total_results { get; }
		public int64 updated { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_query_get_type ()")]
	public class FreebaseQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public FreebaseQuery (string mql);
		[CCode (has_construct_function = false)]
		public FreebaseQuery.from_variant (GLib.Variant variant);
		[NoAccessorMethod]
		public GLib.Variant variant { owned get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_result_get_type ()")]
	public class FreebaseResult : GData.Entry {
		[CCode (has_construct_function = false)]
		public FreebaseResult ();
		public GLib.Variant? dup_variant ();
		[NoAccessorMethod]
		public GLib.Variant variant { owned get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_search_query_get_type ()")]
	public class FreebaseSearchQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public FreebaseSearchQuery (string search_terms);
		public void add_filter (string property, string value);
		public void add_location (uint64 radius, double lat, double lon);
		public void close_filter ();
		public unowned string? get_language ();
		public bool get_stemmed ();
		public void open_filter (GData.FreebaseSearchFilterType filter_type);
		public void set_language (string? lang);
		public void set_stemmed (bool stemmed);
		public string language { get; set; }
		public bool stemmed { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_search_result_get_type ()")]
	public class FreebaseSearchResult : GData.FreebaseResult {
		[CCode (has_construct_function = false)]
		public FreebaseSearchResult ();
		public unowned GData.FreebaseSearchResultItem? get_item (uint i);
		public uint get_num_items ();
		public uint get_total_hits ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdata_freebase_search_result_item_get_type ()")]
	[Compact]
	public class FreebaseSearchResultItem {
		public unowned string get_id ();
		public unowned string get_language ();
		public unowned string get_mid ();
		public unowned string get_name ();
		public unowned string? get_notable_id ();
		public unowned string? get_notable_name ();
		public double get_score ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_service_get_type ()")]
	public class FreebaseService : GData.Service {
		[CCode (has_construct_function = false)]
		public FreebaseService (string? developer_key, GData.Authorizer? authorizer);
		public GLib.InputStream get_image (GData.FreebaseTopicValue value, GLib.Cancellable? cancellable, uint max_width, uint max_height) throws GLib.Error;
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.FreebaseTopicResult get_topic (GData.FreebaseTopicQuery query, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void get_topic_async (GData.FreebaseTopicQuery query, GLib.Cancellable? cancellable);
		public GData.FreebaseResult query (GData.FreebaseQuery query, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void query_async (GData.FreebaseQuery query, GLib.Cancellable? cancellable);
		public GData.FreebaseSearchResult search (GData.FreebaseSearchQuery query, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void search_async (GData.FreebaseSearchQuery query, GLib.Cancellable? cancellable);
		[NoAccessorMethod]
		public string developer_key { owned get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", ref_function = "gdata_freebase_topic_object_ref", type_id = "gdata_freebase_topic_object_get_type ()", unref_function = "gdata_freebase_topic_object_unref")]
	[Compact]
	public class FreebaseTopicObject {
		public unowned string get_id ();
		public uint64 get_property_count (string property);
		public uint64 get_property_hits (string property);
		public unowned GData.FreebaseTopicValue? get_property_value (string property, int64 item);
		public GLib.GenericArray<weak string> list_properties ();
		public GData.FreebaseTopicObject @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_topic_query_get_type ()")]
	public class FreebaseTopicQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public FreebaseTopicQuery (string id);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_filter ();
		public unowned string? get_language ();
		public void set_filter ([CCode (array_length = false, array_null_terminated = true)] string[]? filter);
		public void set_language (string? lang);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] filter { get; set; }
		public string language { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_freebase_topic_result_get_type ()")]
	public class FreebaseTopicResult : GData.FreebaseResult {
		[CCode (has_construct_function = false)]
		public FreebaseTopicResult ();
		public GData.FreebaseTopicObject dup_object ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", ref_function = "gdata_freebase_topic_value_ref", type_id = "gdata_freebase_topic_value_get_type ()", unref_function = "gdata_freebase_topic_value_unref")]
	[Compact]
	public class FreebaseTopicValue {
		public GLib.Value copy_value ();
		public unowned string get_creator ();
		public double get_double ();
		public int64 get_int ();
		public unowned string get_language ();
		public unowned GData.FreebaseTopicObject get_object ();
		public unowned string get_property ();
		public unowned string get_string ();
		public unowned string get_text ();
		public int64 get_timestamp ();
		public GLib.Type get_value_type ();
		public bool is_image ();
		public GData.FreebaseTopicValue @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_calendar_get_type ()")]
	public class GContactCalendar : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GContactCalendar (string uri, string? relation_type, string? label, bool is_primary);
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public unowned string get_uri ();
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_relation_type (string? relation_type);
		public void set_uri (string uri);
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string relation_type { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_event_get_type ()")]
	public class GContactEvent : GData.Parsable {
		[CCode (has_construct_function = false)]
		public GContactEvent (GLib.Date date, string? relation_type, string? label);
		public GLib.Date get_date ();
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public void set_date (GLib.Date date);
		public void set_label (string? label);
		public void set_relation_type (string? relation_type);
		public GLib.Date date { get; set; }
		public string label { get; set; }
		public string relation_type { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_external_id_get_type ()")]
	public class GContactExternalID : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GContactExternalID (string value, string? relation_type, string? label);
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public unowned string get_value ();
		public void set_label (string? label);
		public void set_relation_type (string? relation_type);
		public void set_value (string value);
		public string label { get; set; }
		public string relation_type { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_jot_get_type ()")]
	public class GContactJot : GData.Parsable {
		[CCode (has_construct_function = false)]
		public GContactJot (string content, string relation_type);
		public unowned string get_content ();
		public unowned string get_relation_type ();
		public void set_content (string content);
		public void set_relation_type (string relation_type);
		public string content { get; set; }
		public string relation_type { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_language_get_type ()")]
	public class GContactLanguage : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GContactLanguage (string? code, string? label);
		public unowned string get_code ();
		public unowned string get_label ();
		public void set_code (string? code);
		public void set_label (string? label);
		public string code { get; set; }
		public string label { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_relation_get_type ()")]
	public class GContactRelation : GData.Parsable {
		[CCode (has_construct_function = false)]
		public GContactRelation (string name, string? relation_type, string? label);
		public unowned string get_label ();
		public unowned string get_name ();
		public unowned string get_relation_type ();
		public void set_label (string? label);
		public void set_name (string? name);
		public void set_relation_type (string? relation_type);
		public string label { get; set; }
		public string name { get; set; }
		public string relation_type { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gcontact_website_get_type ()")]
	public class GContactWebsite : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GContactWebsite (string uri, string relation_type, string? label, bool is_primary);
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public unowned string get_uri ();
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_relation_type (string relation_type);
		public void set_uri (string uri);
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string relation_type { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_email_address_get_type ()")]
	public class GDEmailAddress : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDEmailAddress (string address, string? relation_type, string? label, bool is_primary);
		public unowned string get_address ();
		public unowned string get_display_name ();
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public void set_address (string address);
		public void set_display_name (string? display_name);
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_relation_type (string? relation_type);
		public string address { get; set; }
		public string display_name { get; set; }
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string relation_type { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "gd_im_address", type_id = "gdata_gd_im_address_get_type ()")]
	public class GDIMAddress : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDIMAddress (string address, string? protocol, string? relation_type, string? label, bool is_primary);
		public unowned string get_address ();
		public unowned string get_label ();
		public unowned string get_protocol ();
		public unowned string get_relation_type ();
		public void set_address (string address);
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_protocol (string? protocol);
		public void set_relation_type (string? relation_type);
		public string address { get; set; }
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string protocol { get; set; }
		public string relation_type { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_name_get_type ()")]
	public class GDName : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDName (string? given_name, string? family_name);
		public unowned string get_additional_name ();
		public unowned string get_family_name ();
		public unowned string get_full_name ();
		public unowned string get_given_name ();
		public unowned string get_prefix ();
		public unowned string get_suffix ();
		public void set_additional_name (string? additional_name);
		public void set_family_name (string? family_name);
		public void set_full_name (string? full_name);
		public void set_given_name (string? given_name);
		public void set_prefix (string? prefix);
		public void set_suffix (string? suffix);
		public string additional_name { get; set; }
		public string family_name { get; set; }
		public string full_name { get; set; }
		public string given_name { get; set; }
		public string prefix { get; set; }
		public string suffix { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_organization_get_type ()")]
	public class GDOrganization : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDOrganization (string? name, string? title, string? relation_type, string? label, bool is_primary);
		public unowned string get_department ();
		public unowned string get_job_description ();
		public unowned string get_label ();
		public unowned GData.GDWhere get_location ();
		public unowned string get_name ();
		public unowned string get_relation_type ();
		public unowned string get_symbol ();
		public unowned string get_title ();
		public void set_department (string? department);
		public void set_is_primary (bool is_primary);
		public void set_job_description (string? job_description);
		public void set_label (string? label);
		public void set_location (GData.GDWhere? location);
		public void set_name (string? name);
		public void set_relation_type (string? relation_type);
		public void set_symbol (string? symbol);
		public void set_title (string? title);
		public string department { get; set; }
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string job_description { get; set; }
		public string label { get; set; }
		public GData.GDWhere location { get; set; }
		public string name { get; set; }
		public string relation_type { get; set; }
		public string symbol { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_phone_number_get_type ()")]
	public class GDPhoneNumber : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDPhoneNumber (string number, string? relation_type, string? label, string? uri, bool is_primary);
		public unowned string get_label ();
		public unowned string get_number ();
		public unowned string get_relation_type ();
		public unowned string get_uri ();
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_number (string number);
		public void set_relation_type (string? relation_type);
		public void set_uri (string? uri);
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string number { get; set; }
		public string relation_type { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_postal_address_get_type ()")]
	public class GDPostalAddress : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDPostalAddress (string? relation_type, string? label, bool is_primary);
		public unowned string get_address ();
		public unowned string get_agent ();
		public unowned string get_city ();
		public unowned string get_country ();
		public unowned string get_country_code ();
		public unowned string get_house_name ();
		public unowned string get_label ();
		public unowned string get_mail_class ();
		public unowned string get_neighborhood ();
		public unowned string get_po_box ();
		public unowned string get_postcode ();
		public unowned string get_region ();
		public unowned string get_relation_type ();
		public unowned string get_street ();
		public unowned string get_subregion ();
		public unowned string get_usage ();
		public void set_address (string? address);
		public void set_agent (string? agent);
		public void set_city (string? city);
		public void set_country (string? country, string? country_code);
		public void set_house_name (string? house_name);
		public void set_is_primary (bool is_primary);
		public void set_label (string? label);
		public void set_mail_class (string? mail_class);
		public void set_neighborhood (string? neighborhood);
		public void set_po_box (string? po_box);
		public void set_postcode (string? postcode);
		public void set_region (string? region);
		public void set_relation_type (string? relation_type);
		public void set_street (string? street);
		public void set_subregion (string? subregion);
		public void set_usage (string? usage);
		public string address { get; set; }
		public string agent { get; set; }
		public string city { get; set; }
		public string country { get; }
		public string country_code { get; }
		public string house_name { get; set; }
		[NoAccessorMethod]
		public bool is_primary { get; set; }
		public string label { get; set; }
		public string mail_class { get; set; }
		public string neighborhood { get; set; }
		public string po_box { get; set; }
		public string postcode { get; set; }
		public string region { get; set; }
		public string relation_type { get; set; }
		public string street { get; set; }
		public string subregion { get; set; }
		public string usage { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_reminder_get_type ()")]
	public class GDReminder : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDReminder (string? method, int64 absolute_time, int relative_time);
		public int64 get_absolute_time ();
		public unowned string get_method ();
		public int get_relative_time ();
		public void set_absolute_time (int64 absolute_time);
		public void set_method (string? method);
		public void set_relative_time (int relative_time);
		public int64 absolute_time { get; set; }
		[NoAccessorMethod]
		public bool is_absolute_time { get; }
		public string method { get; set; }
		public int relative_time { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_when_get_type ()")]
	public class GDWhen : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDWhen (int64 start_time, int64 end_time, bool is_date);
		public void add_reminder (GData.GDReminder reminder);
		public int64 get_end_time ();
		public unowned GLib.List<GData.GDReminder> get_reminders ();
		public int64 get_start_time ();
		public unowned string get_value_string ();
		public void set_end_time (int64 end_time);
		public void set_is_date (bool is_date);
		public void set_start_time (int64 start_time);
		public void set_value_string (string? value_string);
		public int64 end_time { get; set; }
		[NoAccessorMethod]
		public bool is_date { get; set; }
		public int64 start_time { get; set; }
		public string value_string { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_where_get_type ()")]
	public class GDWhere : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDWhere (string? relation_type, string? value_string, string? label);
		public unowned string get_label ();
		public unowned string get_relation_type ();
		public unowned string get_value_string ();
		public void set_label (string? label);
		public void set_relation_type (string? relation_type);
		public void set_value_string (string? value_string);
		public string label { get; set; }
		public string relation_type { get; set; }
		public string value_string { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_gd_who_get_type ()")]
	public class GDWho : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public GDWho (string? relation_type, string? value_string, string? email_address);
		public unowned string get_email_address ();
		public unowned string get_relation_type ();
		public unowned string get_value_string ();
		public void set_email_address (string? email_address);
		public void set_relation_type (string? relation_type);
		public void set_value_string (string? value_string);
		public string email_address { get; set; }
		public string relation_type { get; set; }
		public string value_string { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_generator_get_type ()")]
	public class Generator : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		protected Generator ();
		public unowned string get_name ();
		public unowned string get_uri ();
		public unowned string get_version ();
		public string name { get; }
		public string uri { get; }
		public string version { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_link_get_type ()")]
	public class Link : GData.Parsable, GData.Comparable {
		[CCode (has_construct_function = false)]
		public Link (string uri, string? relation_type);
		public unowned string get_content_type ();
		public unowned string get_language ();
		public int get_length ();
		public unowned string get_relation_type ();
		public unowned string get_title ();
		public unowned string get_uri ();
		public void set_content_type (string? content_type);
		public void set_language (string? language);
		public void set_length (int length);
		public void set_relation_type (string? relation_type);
		public void set_title (string? title);
		public void set_uri (string uri);
		public string content_type { get; set; }
		public string language { get; set; }
		public int length { get; set; }
		public string relation_type { get; set; }
		public string title { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_media_category_get_type ()")]
	public class MediaCategory : GData.Parsable {
		[CCode (has_construct_function = false)]
		public MediaCategory (string category, string? scheme, string? label);
		public unowned string get_category ();
		public unowned string get_label ();
		public unowned string get_scheme ();
		public void set_category (string category);
		public void set_label (string? label);
		public void set_scheme (string? scheme);
		public string category { get; set; }
		public string label { get; set; }
		public string scheme { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_media_content_get_type ()")]
	public class MediaContent : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected MediaContent ();
		public GData.DownloadStream download (GData.Service service, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned string get_content_type ();
		public int64 get_duration ();
		public GData.MediaExpression get_expression ();
		public size_t get_filesize ();
		public uint get_height ();
		public GData.MediaMedium get_medium ();
		public unowned string get_uri ();
		public uint get_width ();
		public string content_type { get; }
		public int64 duration { get; }
		public GData.MediaExpression expression { get; }
		public ulong filesize { get; }
		public uint height { get; }
		[NoAccessorMethod]
		public bool is_default { get; }
		public GData.MediaMedium medium { get; }
		public string uri { get; }
		public uint width { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_media_credit_get_type ()")]
	public class MediaCredit : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected MediaCredit ();
		public unowned string get_credit ();
		public unowned string get_role ();
		public unowned string get_scheme ();
		public string credit { get; }
		public string role { get; }
		public string scheme { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_media_thumbnail_get_type ()")]
	public class MediaThumbnail : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected MediaThumbnail ();
		public GData.DownloadStream download (GData.Service service, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public uint get_height ();
		public int64 get_time ();
		public unowned string get_uri ();
		public uint get_width ();
		public uint height { get; }
		public int64 time { get; }
		public string uri { get; }
		public uint width { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_oauth1_authorizer_get_type ()")]
	public class OAuth1Authorizer : GLib.Object, GData.Authorizer {
		[CCode (has_construct_function = false)]
		public OAuth1Authorizer (string? application_name, GLib.Type service_type);
		[CCode (has_construct_function = false)]
		public OAuth1Authorizer.for_authorization_domains (string? application_name, GLib.List<GData.AuthorizationDomain> authorization_domains);
		public unowned string? get_application_name ();
		public unowned string? get_locale ();
		public unowned GLib.ProxyResolver? get_proxy_resolver ();
		public Soup.URI? get_proxy_uri ();
		public uint get_timeout ();
		public string request_authentication_uri (out string token, out string token_secret, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async string request_authentication_uri_async (GLib.Cancellable? cancellable, out string token, out string token_secret) throws GLib.Error;
		public bool request_authorization (string token, string token_secret, string verifier, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool request_authorization_async (string token, string token_secret, string verifier, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_locale (string? locale);
		public void set_proxy_resolver (GLib.ProxyResolver? proxy_resolver);
		public void set_proxy_uri (Soup.URI? proxy_uri);
		public void set_timeout (uint timeout);
		public string application_name { get; construct; }
		public string locale { get; set; }
		public GLib.ProxyResolver proxy_resolver { get; set; }
		public Soup.URI proxy_uri { owned get; set; }
		public uint timeout { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_oauth2_authorizer_get_type ()")]
	public class OAuth2Authorizer : GLib.Object, GData.Authorizer {
		[CCode (has_construct_function = false)]
		public OAuth2Authorizer (string client_id, string client_secret, string redirect_uri, GLib.Type service_type);
		public string build_authentication_uri (string? login_hint, bool include_granted_scopes);
		public string dup_refresh_token ();
		[CCode (has_construct_function = false)]
		public OAuth2Authorizer.for_authorization_domains (string client_id, string client_secret, string redirect_uri, GLib.List<GData.AuthorizationDomain> authorization_domains);
		public unowned string get_client_id ();
		public unowned string get_client_secret ();
		public unowned string? get_locale ();
		public unowned GLib.ProxyResolver? get_proxy_resolver ();
		public unowned string get_redirect_uri ();
		public uint get_timeout ();
		public bool request_authorization (string authorization_code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool request_authorization_async (string authorization_code, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_locale (string? locale);
		public void set_proxy_resolver (GLib.ProxyResolver? proxy_resolver);
		public void set_refresh_token (string? refresh_token);
		public void set_timeout (uint timeout);
		public string client_id { get; construct; }
		public string client_secret { get; construct; }
		public string locale { get; set; }
		public GLib.ProxyResolver proxy_resolver { get; set; }
		public string redirect_uri { get; construct; }
		[NoAccessorMethod]
		public string refresh_token { owned get; set; }
		public uint timeout { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_parsable_get_type ()")]
	public abstract class Parsable : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Parsable ();
		[CCode (has_construct_function = false)]
		public Parsable.from_json (GLib.Type parsable_type, string json, int length) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Parsable.from_xml (GLib.Type parsable_type, string xml, int length) throws GLib.Error;
		[NoWrapper]
		public virtual void get_json (Json.Builder builder);
		[CCode (cname = "gdata_parsable_get_json")]
		public string get_json_string ();
		[NoWrapper]
		public virtual void get_namespaces (GLib.HashTable<void*,void*> namespaces);
		[NoWrapper]
		public virtual void get_xml (GLib.StringBuilder xml_string);
		[NoWrapper]
		public virtual bool parse_json (Json.Reader reader) throws GLib.Error;
		[NoWrapper]
		public virtual bool parse_xml (Xml.Doc doc, Xml.Node node) throws GLib.Error;
		[NoWrapper]
		public virtual bool post_parse_json () throws GLib.Error;
		[NoWrapper]
		public virtual bool post_parse_xml () throws GLib.Error;
		[NoWrapper]
		public virtual void pre_get_xml (GLib.StringBuilder xml_string);
		[NoWrapper]
		public virtual bool pre_parse_xml (Xml.Doc doc, Xml.Node root_node) throws GLib.Error;
		[NoAccessorMethod]
		public bool constructed_from_xml { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_album", type_id = "gdata_picasaweb_album_get_type ()")]
	public class PicasaWebAlbum : GData.Entry {
		[CCode (has_construct_function = false)]
		public PicasaWebAlbum (string? id);
		public long get_bytes_used ();
		public uint get_comment_count ();
		public unowned GLib.List<GData.MediaContent> get_contents ();
		public void get_coordinates (out double latitude, out double longitude);
		public int64 get_edited ();
		public unowned string get_id ();
		public unowned string get_location ();
		public unowned string get_nickname ();
		public uint get_num_photos ();
		public uint get_num_photos_remaining ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_tags ();
		public unowned GLib.List<GData.MediaThumbnail> get_thumbnails ();
		public int64 get_timestamp ();
		public unowned string get_user ();
		public GData.PicasaWebVisibility get_visibility ();
		public void set_coordinates (double latitude, double longitude);
		public void set_is_commenting_enabled (bool is_commenting_enabled);
		public void set_location (string? location);
		public void set_tags ([CCode (array_length = false, array_null_terminated = true)] string[]? tags);
		public void set_timestamp (int64 timestamp);
		public void set_visibility (GData.PicasaWebVisibility visibility);
		[NoAccessorMethod]
		public string album_id { owned get; construct; }
		public long bytes_used { get; }
		public uint comment_count { get; }
		public int64 edited { get; }
		[NoAccessorMethod]
		public bool is_commenting_enabled { get; set; }
		[NoAccessorMethod]
		public double latitude { get; set; }
		public string location { get; set; }
		[NoAccessorMethod]
		public double longitude { get; set; }
		public string nickname { get; }
		public uint num_photos { get; }
		public uint num_photos_remaining { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] tags { get; set; }
		public int64 timestamp { get; set; }
		public string user { get; }
		public GData.PicasaWebVisibility visibility { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_comment", type_id = "gdata_picasaweb_comment_get_type ()")]
	public class PicasaWebComment : GData.Comment {
		[CCode (has_construct_function = false)]
		public PicasaWebComment (string id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_feed", type_id = "gdata_picasaweb_feed_get_type ()")]
	public class PicasaWebFeed : GData.Feed {
		[CCode (has_construct_function = false)]
		protected PicasaWebFeed ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_file", type_id = "gdata_picasaweb_file_get_type ()")]
	public class PicasaWebFile : GData.Entry, GData.Commentable {
		[CCode (has_construct_function = false)]
		public PicasaWebFile (string? id);
		public unowned string get_album_id ();
		public unowned string get_caption ();
		public unowned string get_checksum ();
		public uint get_comment_count ();
		public unowned GLib.List<GData.MediaContent> get_contents ();
		public void get_coordinates (out double latitude, out double longitude);
		public unowned string get_credit ();
		public double get_distance ();
		public int64 get_edited ();
		public double get_exposure ();
		public bool get_flash ();
		public double get_focal_length ();
		public double get_fstop ();
		public uint get_height ();
		public unowned string get_id ();
		public unowned string get_image_unique_id ();
		public int get_iso ();
		public unowned string get_make ();
		public unowned string get_model ();
		public uint get_rotation ();
		public size_t get_size ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_tags ();
		public unowned GLib.List<GData.MediaThumbnail> get_thumbnails ();
		public int64 get_timestamp ();
		public unowned string get_version ();
		public unowned string get_video_status ();
		public uint get_width ();
		public void set_album_id (string album_id);
		public void set_caption (string? caption);
		public void set_checksum (string? checksum);
		public void set_coordinates (double latitude, double longitude);
		public void set_is_commenting_enabled (bool is_commenting_enabled);
		public void set_rotation (uint rotation);
		public void set_tags ([CCode (array_length = false, array_null_terminated = true)] string[]? tags);
		public void set_timestamp (int64 timestamp);
		public string album_id { get; set; }
		public string caption { get; set; }
		public string checksum { get; set; }
		public uint comment_count { get; }
		public string credit { get; }
		public double distance { get; }
		public int64 edited { get; }
		public double exposure { get; }
		[NoAccessorMethod]
		public string file_id { owned get; construct; }
		public bool flash { get; }
		public double focal_length { get; }
		public double fstop { get; }
		public uint height { get; }
		public string image_unique_id { get; }
		[NoAccessorMethod]
		public bool is_commenting_enabled { get; set; }
		public long iso { get; }
		[NoAccessorMethod]
		public double latitude { get; set; }
		[NoAccessorMethod]
		public double longitude { get; set; }
		public string make { get; }
		public string model { get; }
		public uint rotation { get; set; }
		public ulong size { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] tags { get; set; }
		public int64 timestamp { get; set; }
		public string version { get; construct; }
		public string video_status { get; }
		public uint width { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_query", type_id = "gdata_picasaweb_query_get_type ()")]
	public class PicasaWebQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public PicasaWebQuery (string? q);
		public void get_bounding_box (out double north, out double east, out double south, out double west);
		public unowned string get_image_size ();
		public unowned string get_location ();
		public unowned string get_tag ();
		public unowned string get_thumbnail_size ();
		public GData.PicasaWebVisibility get_visibility ();
		public void set_bounding_box (double north, double east, double south, double west);
		public void set_image_size (string? image_size);
		public void set_location (string? location);
		public void set_tag (string? tag);
		public void set_thumbnail_size (string? thumbnail_size);
		public void set_visibility (GData.PicasaWebVisibility visibility);
		[CCode (has_construct_function = false)]
		public PicasaWebQuery.with_limits (string? q, uint start_index, uint max_results);
		public string image_size { get; set; }
		public string location { get; set; }
		public string tag { get; set; }
		public string thumbnail_size { get; set; }
		public int visibility { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_service", type_id = "gdata_picasaweb_service_get_type ()")]
	public class PicasaWebService : GData.Service {
		[CCode (has_construct_function = false)]
		public PicasaWebService (GData.Authorizer? authorizer);
		public GData.PicasaWebFile finish_file_upload (GData.UploadStream upload_stream) throws GLib.Error;
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.PicasaWebUser get_user (string? username, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.PicasaWebUser get_user_async (string? username, GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.PicasaWebAlbum insert_album (GData.PicasaWebAlbum album, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_album_async (GData.PicasaWebAlbum album, GLib.Cancellable? cancellable);
		public GData.Feed query_all_albums (GData.Query? query, string? username, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_all_albums_async (GData.Query? query, string? username, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_files (GData.PicasaWebAlbum? album, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_files_async (GData.PicasaWebAlbum? album, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.UploadStream upload_file (GData.PicasaWebAlbum? album, GData.PicasaWebFile file_entry, string slug, string content_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "picasaweb_user", type_id = "gdata_picasaweb_user_get_type ()")]
	public class PicasaWebUser : GData.Entry {
		[CCode (has_construct_function = false)]
		protected PicasaWebUser ();
		public int get_max_photos_per_album ();
		public unowned string get_nickname ();
		public int64 get_quota_current ();
		public int64 get_quota_limit ();
		public unowned string get_thumbnail_uri ();
		public unowned string get_user ();
		public int max_photos_per_album { get; }
		public string nickname { get; }
		public int64 quota_current { get; }
		public int64 quota_limit { get; }
		public string thumbnail_uri { get; }
		public string user { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_query_get_type ()")]
	public class Query : GLib.Object {
		[CCode (has_construct_function = false)]
		public Query (string? q);
		public unowned string get_author ();
		public unowned string get_categories ();
		public unowned string get_etag ();
		public uint get_max_results ();
		public int64 get_published_max ();
		public int64 get_published_min ();
		public unowned string get_q ();
		[NoWrapper]
		public virtual void get_query_uri (string feed_uri, GLib.StringBuilder query_uri, bool params_started);
		public uint get_start_index ();
		public int64 get_updated_max ();
		public int64 get_updated_min ();
		public void next_page ();
		public bool previous_page ();
		public void set_author (string? author);
		public void set_categories (string? categories);
		public void set_etag (string? etag);
		public void set_is_strict (bool is_strict);
		public void set_max_results (uint max_results);
		public void set_published_max (int64 published_max);
		public void set_published_min (int64 published_min);
		public void set_q (string? q);
		public void set_start_index (uint start_index);
		public void set_updated_max (int64 updated_max);
		public void set_updated_min (int64 updated_min);
		[CCode (has_construct_function = false)]
		public Query.with_limits (string? q, uint start_index, uint max_results);
		public string author { get; set; }
		public string categories { get; set; }
		public string etag { get; set; }
		[NoAccessorMethod]
		public bool is_strict { get; set; }
		public uint max_results { get; set; }
		public int64 published_max { get; set; }
		public int64 published_min { get; set; }
		public string q { get; set; }
		public uint start_index { get; set; }
		public int64 updated_max { get; set; }
		public int64 updated_min { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_service_get_type ()")]
	public class Service : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Service ();
		[NoWrapper]
		public virtual void append_query_headers (GData.AuthorizationDomain domain, Soup.Message message);
		public bool delete_entry (GData.AuthorizationDomain? domain, GData.Entry entry, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool delete_entry_async (GData.AuthorizationDomain? domain, GData.Entry entry, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.List<weak GData.AuthorizationDomain> get_authorization_domains (GLib.Type service_type);
		public unowned GData.Authorizer get_authorizer ();
		public unowned string get_locale ();
		public unowned GLib.ProxyResolver? get_proxy_resolver ();
		public unowned Soup.URI get_proxy_uri ();
		public uint get_timeout ();
		public GData.Entry insert_entry (GData.AuthorizationDomain? domain, string upload_uri, GData.Entry entry, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.Entry insert_entry_async (GData.AuthorizationDomain? domain, string upload_uri, GData.Entry entry, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool is_authorized ();
		[NoWrapper]
		public virtual void parse_error_response (GData.OperationType operation_type, uint status, string reason_phrase, string response_body, int length) throws GLib.Error;
		public GData.Feed query (GData.AuthorizationDomain? domain, string feed_uri, GData.Query? query, GLib.Type entry_type, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async GData.Feed query_async (GData.AuthorizationDomain? domain, string feed_uri, GData.Query? query, GLib.Type entry_type, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public GData.Entry query_single_entry (GData.AuthorizationDomain? domain, string entry_id, GData.Query? query, GLib.Type entry_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.Entry query_single_entry_async (GData.AuthorizationDomain? domain, string entry_id, GData.Query? query, GLib.Type entry_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_authorizer (GData.Authorizer authorizer);
		public void set_locale (string? locale);
		public void set_proxy_resolver (GLib.ProxyResolver? proxy_resolver);
		public void set_proxy_uri (Soup.URI? proxy_uri);
		public void set_timeout (uint timeout);
		public GData.Entry update_entry (GData.AuthorizationDomain? domain, GData.Entry entry, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.Entry update_entry_async (GData.AuthorizationDomain? domain, GData.Entry entry, GLib.Cancellable? cancellable) throws GLib.Error;
		public GData.Authorizer authorizer { get; set; }
		public string locale { get; set; }
		public GLib.ProxyResolver proxy_resolver { get; set; }
		public Soup.URI proxy_uri { get; set; }
		public uint timeout { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_tasks_query_get_type ()")]
	public class TasksQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public TasksQuery (string? q);
		public int64 get_completed_max ();
		public int64 get_completed_min ();
		public int64 get_due_max ();
		public int64 get_due_min ();
		public bool get_show_completed ();
		public bool get_show_deleted ();
		public bool get_show_hidden ();
		public void set_completed_max (int64 completed_max);
		public void set_completed_min (int64 completed_min);
		public void set_due_max (int64 due_max);
		public void set_due_min (int64 due_min);
		public void set_show_completed (bool show_completed);
		public void set_show_deleted (bool show_deleted);
		public void set_show_hidden (bool show_hidden);
		public int64 completed_max { get; set; }
		public int64 completed_min { get; set; }
		public int64 due_max { get; set; }
		public int64 due_min { get; set; }
		public bool show_completed { get; set; }
		public bool show_deleted { get; set; }
		public bool show_hidden { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_tasks_service_get_type ()")]
	public class TasksService : GData.Service {
		[CCode (has_construct_function = false)]
		public TasksService (GData.Authorizer? authorizer);
		public bool delete_task (GData.TasksTask task, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void delete_task_async (GData.TasksTask task, GLib.Cancellable? cancellable);
		public bool delete_tasklist (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void delete_tasklist_async (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable);
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.TasksTask insert_task (GData.TasksTask task, GData.TasksTasklist tasklist, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_task_async (GData.TasksTask task, GData.TasksTasklist tasklist, GLib.Cancellable? cancellable);
		public GData.TasksTasklist insert_tasklist (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void insert_tasklist_async (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable);
		public GData.Feed query_all_tasklists (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_all_tasklists_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_tasks (GData.TasksTasklist tasklist, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_tasks_async (GData.TasksTasklist tasklist, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.TasksTask update_task (GData.TasksTask task, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void update_task_async (GData.TasksTask task, GLib.Cancellable? cancellable);
		public GData.TasksTasklist update_tasklist (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void update_tasklist_async (GData.TasksTasklist tasklist, GLib.Cancellable? cancellable);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_tasks_task_get_type ()")]
	public class TasksTask : GData.Entry {
		[CCode (has_construct_function = false)]
		public TasksTask (string? id);
		public int64 get_completed ();
		public int64 get_due ();
		public unowned string? get_notes ();
		public unowned string? get_parent ();
		public unowned string? get_position ();
		public unowned string? get_status ();
		public void set_completed (int64 completed);
		public void set_due (int64 due);
		public void set_is_deleted (bool deleted);
		public void set_notes (string? notes);
		public void set_status (string? status);
		public int64 completed { get; set; }
		public int64 due { get; set; }
		[NoAccessorMethod]
		public bool is_deleted { get; set; }
		[NoAccessorMethod]
		public bool is_hidden { get; }
		public string notes { get; set; }
		public string parent { get; }
		public string position { get; }
		public string status { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_tasks_tasklist_get_type ()")]
	public class TasksTasklist : GData.Entry {
		[CCode (has_construct_function = false)]
		public TasksTasklist (string? id);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_upload_stream_get_type ()")]
	public class UploadStream : GLib.OutputStream {
		[CCode (has_construct_function = false, type = "GOutputStream*")]
		public UploadStream (GData.Service service, GData.AuthorizationDomain? domain, string method, string upload_uri, GData.Entry? entry, string slug, string content_type, GLib.Cancellable? cancellable = null);
		public unowned GData.AuthorizationDomain? get_authorization_domain ();
		public unowned GLib.Cancellable get_cancellable ();
		public int64 get_content_length ();
		public unowned string get_content_type ();
		public unowned GData.Entry get_entry ();
		public unowned string get_method ();
		public unowned string get_response (out ssize_t length);
		public unowned GData.Service get_service ();
		public unowned string get_slug ();
		public unowned string get_upload_uri ();
		[CCode (has_construct_function = false, type = "GOutputStream*")]
		public UploadStream.resumable (GData.Service service, GData.AuthorizationDomain? domain, string method, string upload_uri, GData.Entry? entry, string slug, string content_type, int64 content_length, GLib.Cancellable? cancellable = null);
		public GData.AuthorizationDomain authorization_domain { get; construct; }
		public GLib.Cancellable cancellable { get; construct; }
		public int64 content_length { get; construct; }
		public string content_type { get; construct; }
		public GData.Entry entry { get; construct; }
		public string method { get; construct; }
		public GData.Service service { get; construct; }
		public string slug { get; construct; }
		public string upload_uri { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_category", type_id = "gdata_youtube_category_get_type ()")]
	public class YouTubeCategory : GData.Category, GData.Comparable {
		[CCode (has_construct_function = false)]
		protected YouTubeCategory ();
		public bool is_browsable (string region);
		[NoAccessorMethod]
		public bool is_assignable { get; }
		[NoAccessorMethod]
		public bool is_deprecated { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_comment", type_id = "gdata_youtube_comment_get_type ()")]
	public class YouTubeComment : GData.Comment {
		[CCode (has_construct_function = false)]
		public YouTubeComment (string id);
		public unowned string get_parent_comment_uri ();
		public void set_parent_comment_uri (string parent_comment_uri);
		public string parent_comment_uri { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_content", type_id = "gdata_youtube_content_get_type ()")]
	public class YouTubeContent : GData.MediaContent {
		[CCode (has_construct_function = false)]
		protected YouTubeContent ();
		public GData.YouTubeFormat get_format ();
		public GData.YouTubeFormat format { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_credit", type_id = "gdata_youtube_credit_get_type ()")]
	public class YouTubeCredit : GData.MediaCredit {
		[CCode (has_construct_function = false)]
		protected YouTubeCredit ();
		public unowned string get_entity_type ();
		public string entity_type { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_feed", type_id = "gdata_youtube_feed_get_type ()")]
	public class YouTubeFeed : GData.Feed {
		[CCode (has_construct_function = false)]
		protected YouTubeFeed ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_query", type_id = "gdata_youtube_query_get_type ()")]
	public class YouTubeQuery : GData.Query {
		[CCode (has_construct_function = false)]
		public YouTubeQuery (string? q);
		public GData.YouTubeAge get_age ();
		public GData.YouTubeFormat get_format ();
		public unowned string get_language ();
		public unowned string get_license ();
		public void get_location (out double latitude, out double longitude, out double radius, out bool has_location);
		public unowned string get_order_by ();
		public unowned string get_restriction ();
		public GData.YouTubeSafeSearch get_safe_search ();
		public GData.YouTubeSortOrder get_sort_order ();
		public GData.YouTubeUploader get_uploader ();
		public void set_age (GData.YouTubeAge age);
		public void set_format (GData.YouTubeFormat format);
		public void set_language (string? language);
		public void set_license (string? license);
		public void set_location (double latitude, double longitude, double radius, bool has_location);
		public void set_order_by (string? order_by);
		public void set_restriction (string? restriction);
		public void set_safe_search (GData.YouTubeSafeSearch safe_search);
		public void set_sort_order (GData.YouTubeSortOrder sort_order);
		public void set_uploader (GData.YouTubeUploader uploader);
		public GData.YouTubeAge age { get; set; }
		public GData.YouTubeFormat format { get; set; }
		[NoAccessorMethod]
		public bool has_location { get; set; }
		public string language { get; set; }
		[NoAccessorMethod]
		public double latitude { get; set; }
		public string license { get; set; }
		[NoAccessorMethod]
		public double location_radius { get; set; }
		[NoAccessorMethod]
		public double longitude { get; set; }
		public string order_by { get; set; }
		public string restriction { get; set; }
		public GData.YouTubeSafeSearch safe_search { get; set; }
		public GData.YouTubeSortOrder sort_order { get; set; }
		public GData.YouTubeUploader uploader { get; set; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_service", type_id = "gdata_youtube_service_get_type ()")]
	public class YouTubeService : GData.Service, GData.Batchable {
		[CCode (has_construct_function = false)]
		public YouTubeService (string developer_key, GData.Authorizer? authorizer);
		public static GLib.Quark error_quark ();
		public GData.YouTubeVideo finish_video_upload (GData.UploadStream upload_stream) throws GLib.Error;
		public GData.APPCategories get_categories (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.APPCategories get_categories_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_developer_key ();
		public static unowned GData.AuthorizationDomain get_primary_authorization_domain ();
		public GData.Feed query_related (GData.YouTubeVideo video, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_related_async (GData.YouTubeVideo video, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_standard_feed (GData.YouTubeStandardFeedType feed_type, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_standard_feed_async (GData.YouTubeStandardFeedType feed_type, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.Feed query_videos (GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void query_videos_async (GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
		public GData.UploadStream upload_video (GData.YouTubeVideo video, string slug, string content_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string developer_key { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_state", type_id = "gdata_youtube_state_get_type ()")]
	public class YouTubeState : GData.Parsable {
		[CCode (has_construct_function = false)]
		protected YouTubeState ();
		public unowned string get_help_uri ();
		public unowned string get_message ();
		public unowned string get_name ();
		public unowned string get_reason_code ();
		public string help_uri { get; construct; }
		public string message { get; construct; }
		public string name { get; construct; }
		public string reason_code { get; construct; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", lower_case_csuffix = "youtube_video", type_id = "gdata_youtube_video_get_type ()")]
	public class YouTubeVideo : GData.Entry, GData.Commentable {
		[CCode (has_construct_function = false)]
		public YouTubeVideo (string? id);
		public GData.YouTubePermission get_access_control (string action);
		public unowned string get_aspect_ratio ();
		public unowned GData.MediaCategory get_category ();
		public void get_coordinates (out double latitude, out double longitude);
		public unowned GData.YouTubeCredit get_credit ();
		public unowned string get_description ();
		public uint get_duration ();
		public uint get_favorite_count ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_keywords ();
		public unowned string get_location ();
		public unowned string get_media_rating (string rating_type);
		public unowned string get_player_uri ();
		public void get_rating (out uint min, out uint max, out uint count, out double average);
		public int64 get_recorded ();
		public unowned GData.YouTubeState get_state ();
		public unowned GLib.List<GData.MediaThumbnail> get_thumbnails ();
		public int64 get_uploaded ();
		public unowned string get_video_id ();
		public static string get_video_id_from_uri (string video_uri);
		public uint get_view_count ();
		public bool is_restricted_in_country (string country);
		public unowned GData.YouTubeContent look_up_content (string type);
		public void set_access_control (string action, GData.YouTubePermission permission);
		public void set_aspect_ratio (string? aspect_ratio);
		public void set_category (GData.MediaCategory category);
		public void set_coordinates (double latitude, double longitude);
		public void set_description (string? description);
		public void set_is_draft (bool is_draft);
		public void set_is_private (bool is_private);
		public void set_keywords ([CCode (array_length = false, array_null_terminated = true)] string[] keywords);
		public void set_location (string? location);
		public void set_recorded (int64 recorded);
		public string aspect_ratio { get; set; }
		[NoAccessorMethod]
		public double average_rating { get; }
		public GData.MediaCategory category { get; set; }
		public GData.YouTubeCredit credit { get; }
		public string description { get; set; }
		public uint duration { get; }
		public uint favorite_count { get; }
		[NoAccessorMethod]
		public bool is_draft { get; set; }
		[NoAccessorMethod]
		public bool is_private { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] keywords { get; set; }
		[NoAccessorMethod]
		public double latitude { get; set; }
		public string location { get; set; }
		[NoAccessorMethod]
		public double longitude { get; set; }
		[NoAccessorMethod]
		public uint max_rating { get; }
		[NoAccessorMethod]
		public uint min_rating { get; }
		public string player_uri { get; }
		[NoAccessorMethod]
		public uint rating_count { get; }
		public int64 recorded { get; set; }
		public GData.YouTubeState state { get; }
		public int64 uploaded { get; }
		public string video_id { get; }
		public uint view_count { get; }
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_access_handler_get_type ()")]
	public interface AccessHandler : GData.Entry {
		public abstract GData.Feed get_rules (GData.Service service, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async void get_rules_async (GData.Service service, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_cname = "GDataAuthorizerInterface", type_id = "gdata_authorizer_get_type ()")]
	public interface Authorizer : GLib.Object {
		public abstract bool is_authorized_for_domain (GData.AuthorizationDomain domain);
		public abstract void process_request (GData.AuthorizationDomain? domain, Soup.Message message);
		public virtual bool refresh_authorization (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public virtual async bool refresh_authorization_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_batchable_get_type ()")]
	public interface Batchable : GData.Service {
		public GData.BatchOperation create_operation (GData.AuthorizationDomain? domain, string feed_uri);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_cname = "GDataCommentableInterface", type_id = "gdata_commentable_get_type ()")]
	public interface Commentable : GData.Entry {
		public bool delete_comment (GData.Service service, GData.Comment comment_, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool delete_comment_async (GData.Service service, GData.Comment comment_, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoWrapper]
		public abstract string get_insert_comment_uri (GData.Comment comment);
		[NoWrapper]
		public abstract string get_query_comments_uri ();
		public GData.Comment? insert_comment (GData.Service service, GData.Comment comment_, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GData.Comment? insert_comment_async (GData.Service service, GData.Comment comment_, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoWrapper]
		public abstract bool is_comment_deletable (GData.Comment comment);
		public GData.Feed? query_comments (GData.Service service, GData.Query? query, GLib.Cancellable? cancellable, GData.QueryProgressCallback? progress_callback) throws GLib.Error;
		public async GData.Feed? query_comments_async (GData.Service service, GData.Query? query, GLib.Cancellable? cancellable, owned GData.QueryProgressCallback? progress_callback) throws GLib.Error;
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_comparable_get_type ()")]
	public interface Comparable : GLib.Object {
		public int compare (GData.Comparable? other);
		[NoWrapper]
		public abstract int compare_with (GData.Comparable other);
	}
	[CCode (cheader_filename = "gdata/gdata.h", type_id = "gdata_color_get_type ()")]
	public struct Color {
		public uint16 red;
		public uint16 green;
		public uint16 blue;
		public static bool from_hexadecimal (string hexadecimal, out GData.Color color);
		public string to_hexadecimal ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_BATCH_OPERATION_", type_id = "gdata_batch_operation_type_get_type ()")]
	public enum BatchOperationType {
		QUERY,
		INSERTION,
		UPDATE,
		DELETION
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_FREEBASE_SEARCH_FILTER_", type_id = "gdata_freebase_search_filter_type_get_type ()")]
	public enum FreebaseSearchFilterType {
		ALL,
		ANY,
		NOT
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_MEDIA_EXPRESSION_", type_id = "gdata_media_expression_get_type ()")]
	public enum MediaExpression {
		SAMPLE,
		FULL,
		NONSTOP
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_MEDIA_", type_id = "gdata_media_medium_get_type ()")]
	public enum MediaMedium {
		UNKNOWN,
		IMAGE,
		AUDIO,
		VIDEO,
		DOCUMENT,
		EXECUTABLE
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_OPERATION_", type_id = "gdata_operation_type_get_type ()")]
	public enum OperationType {
		QUERY,
		INSERTION,
		UPDATE,
		DELETION,
		DOWNLOAD,
		UPLOAD,
		AUTHENTICATION,
		BATCH
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_PICASAWEB_", type_id = "gdata_picasaweb_visibility_get_type ()")]
	public enum PicasaWebVisibility {
		PUBLIC,
		PRIVATE
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_AGE_", type_id = "gdata_youtube_age_get_type ()")]
	public enum YouTubeAge {
		ALL_TIME,
		TODAY,
		THIS_WEEK,
		THIS_MONTH
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_FORMAT_", type_id = "gdata_youtube_format_get_type ()")]
	public enum YouTubeFormat {
		UNKNOWN,
		RTSP_H263_AMR,
		HTTP_SWF,
		RTSP_MPEG4_AAC
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_PERMISSION_", type_id = "gdata_youtube_permission_get_type ()")]
	public enum YouTubePermission {
		ALLOWED,
		DENIED,
		MODERATED
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_SAFE_SEARCH_", type_id = "gdata_youtube_safe_search_get_type ()")]
	public enum YouTubeSafeSearch {
		NONE,
		MODERATE,
		STRICT
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_SORT_", type_id = "gdata_youtube_sort_order_get_type ()")]
	public enum YouTubeSortOrder {
		NONE,
		ASCENDING,
		DESCENDING
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_", type_id = "gdata_youtube_standard_feed_type_get_type ()")]
	public enum YouTubeStandardFeedType {
		TOP_RATED_FEED,
		TOP_FAVORITES_FEED,
		MOST_VIEWED_FEED,
		MOST_POPULAR_FEED,
		MOST_RECENT_FEED,
		MOST_DISCUSSED_FEED,
		MOST_LINKED_FEED,
		MOST_RESPONDED_FEED,
		RECENTLY_FEATURED_FEED,
		WATCH_ON_MOBILE_FEED
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_UPLOADER_", type_id = "gdata_youtube_uploader_get_type ()")]
	public enum YouTubeUploader {
		ALL,
		PARTNER
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_CLIENT_LOGIN_AUTHORIZER_ERROR_")]
	public errordomain ClientLoginAuthorizerError {
		BAD_AUTHENTICATION,
		NOT_VERIFIED,
		TERMS_NOT_AGREED,
		CAPTCHA_REQUIRED,
		ACCOUNT_DELETED,
		ACCOUNT_DISABLED,
		SERVICE_DISABLED,
		ACCOUNT_MIGRATED,
		INVALID_SECOND_FACTOR;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_DOCUMENTS_SERVICE_ERROR_INVALID_CONTENT_")]
	public errordomain DocumentsServiceError {
		TYPE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_PARSER_ERROR_")]
	public errordomain ParserError {
		PARSING_STRING,
		EMPTY_DOCUMENT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_SERVICE_ERROR_")]
	public errordomain ServiceError {
		UNAVAILABLE,
		PROTOCOL_ERROR,
		ENTRY_ALREADY_INSERTED,
		AUTHENTICATION_REQUIRED,
		NOT_FOUND,
		CONFLICT,
		FORBIDDEN,
		BAD_QUERY_PARAMETER,
		NETWORK_ERROR,
		PROXY_ERROR,
		WITH_BATCH_OPERATION,
		API_QUOTA_EXCEEDED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdata/gdata.h", cprefix = "GDATA_YOUTUBE_SERVICE_ERROR_")]
	public errordomain YouTubeServiceError {
		API_QUOTA_EXCEEDED,
		ENTRY_QUOTA_EXCEEDED,
		CHANNEL_REQUIRED
	}
	[CCode (cheader_filename = "gdata/gdata.h", instance_pos = 4.9)]
	public delegate void BatchOperationCallback (uint operation_id, GData.BatchOperationType operation_type, GData.Entry entry, GLib.Error error);
	[CCode (cheader_filename = "gdata/gdata.h", instance_pos = 3.9)]
	public delegate void QueryProgressCallback (GData.Entry entry, uint entry_key, uint entry_count);
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_ACCESS_ROLE_NONE")]
	public const string ACCESS_ROLE_NONE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_ACCESS_SCOPE_DEFAULT")]
	public const string ACCESS_SCOPE_DEFAULT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_ACCESS_SCOPE_DOMAIN")]
	public const string ACCESS_SCOPE_DOMAIN;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_ACCESS_SCOPE_USER")]
	public const string ACCESS_SCOPE_USER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CALENDAR_ACCESS_ROLE_EDITOR")]
	public const string CALENDAR_ACCESS_ROLE_EDITOR;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CALENDAR_ACCESS_ROLE_FREE_BUSY")]
	public const string CALENDAR_ACCESS_ROLE_FREE_BUSY;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CALENDAR_ACCESS_ROLE_OWNER")]
	public const string CALENDAR_ACCESS_ROLE_OWNER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CALENDAR_ACCESS_ROLE_READ")]
	public const string CALENDAR_ACCESS_ROLE_READ;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CALENDAR_ACCESS_ROLE_ROOT")]
	public const string CALENDAR_ACCESS_ROLE_ROOT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_CATEGORY_SCHEMA_LABELS")]
	public const string CATEGORY_SCHEMA_LABELS;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_ACCESS_ROLE_OWNER")]
	public const string DOCUMENTS_ACCESS_ROLE_OWNER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_ACCESS_ROLE_READER")]
	public const string DOCUMENTS_ACCESS_ROLE_READER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_ACCESS_ROLE_WRITER")]
	public const string DOCUMENTS_ACCESS_ROLE_WRITER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_DRAWING_JPEG")]
	public const string DOCUMENTS_DRAWING_JPEG;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_DRAWING_PDF")]
	public const string DOCUMENTS_DRAWING_PDF;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_DRAWING_PNG")]
	public const string DOCUMENTS_DRAWING_PNG;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_DOCUMENTS_DRAWING_SVG")]
	public const string DOCUMENTS_DRAWING_SVG;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_CALENDAR_FREE_BUSY")]
	public const string GCONTACT_CALENDAR_FREE_BUSY;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_CALENDAR_HOME")]
	public const string GCONTACT_CALENDAR_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_CALENDAR_WORK")]
	public const string GCONTACT_CALENDAR_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EVENT_ANNIVERSARY")]
	public const string GCONTACT_EVENT_ANNIVERSARY;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EVENT_OTHER")]
	public const string GCONTACT_EVENT_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EXTERNAL_ID_ACCOUNT")]
	public const string GCONTACT_EXTERNAL_ID_ACCOUNT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EXTERNAL_ID_CUSTOMER")]
	public const string GCONTACT_EXTERNAL_ID_CUSTOMER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EXTERNAL_ID_NETWORK")]
	public const string GCONTACT_EXTERNAL_ID_NETWORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_EXTERNAL_ID_ORGANIZATION")]
	public const string GCONTACT_EXTERNAL_ID_ORGANIZATION;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_JOT_HOME")]
	public const string GCONTACT_JOT_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_JOT_KEYWORDS")]
	public const string GCONTACT_JOT_KEYWORDS;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_JOT_OTHER")]
	public const string GCONTACT_JOT_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_JOT_USER")]
	public const string GCONTACT_JOT_USER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_JOT_WORK")]
	public const string GCONTACT_JOT_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_ASSISTANT")]
	public const string GCONTACT_RELATION_ASSISTANT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_BROTHER")]
	public const string GCONTACT_RELATION_BROTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_CHILD")]
	public const string GCONTACT_RELATION_CHILD;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_DOMESTIC_PARTNER")]
	public const string GCONTACT_RELATION_DOMESTIC_PARTNER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_FATHER")]
	public const string GCONTACT_RELATION_FATHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_FRIEND")]
	public const string GCONTACT_RELATION_FRIEND;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_MANAGER")]
	public const string GCONTACT_RELATION_MANAGER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_MOTHER")]
	public const string GCONTACT_RELATION_MOTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_PARENT")]
	public const string GCONTACT_RELATION_PARENT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_PARTNER")]
	public const string GCONTACT_RELATION_PARTNER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_REFERRER")]
	public const string GCONTACT_RELATION_REFERRER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_RELATIVE")]
	public const string GCONTACT_RELATION_RELATIVE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_SISTER")]
	public const string GCONTACT_RELATION_SISTER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_RELATION_SPOUSE")]
	public const string GCONTACT_RELATION_SPOUSE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_BLOG")]
	public const string GCONTACT_WEBSITE_BLOG;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_FTP")]
	public const string GCONTACT_WEBSITE_FTP;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_HOME")]
	public const string GCONTACT_WEBSITE_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_HOME_PAGE")]
	public const string GCONTACT_WEBSITE_HOME_PAGE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_OTHER")]
	public const string GCONTACT_WEBSITE_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_PROFILE")]
	public const string GCONTACT_WEBSITE_PROFILE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GCONTACT_WEBSITE_WORK")]
	public const string GCONTACT_WEBSITE_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_ADDRESS_USAGE_GENERAL")]
	public const string GD_ADDRESS_USAGE_GENERAL;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_ADDRESS_USAGE_LOCAL")]
	public const string GD_ADDRESS_USAGE_LOCAL;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EMAIL_ADDRESS_HOME")]
	public const string GD_EMAIL_ADDRESS_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EMAIL_ADDRESS_OTHER")]
	public const string GD_EMAIL_ADDRESS_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EMAIL_ADDRESS_WORK")]
	public const string GD_EMAIL_ADDRESS_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_STATUS_CANCELED")]
	public const string GD_EVENT_STATUS_CANCELED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_STATUS_CONFIRMED")]
	public const string GD_EVENT_STATUS_CONFIRMED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_STATUS_TENTATIVE")]
	public const string GD_EVENT_STATUS_TENTATIVE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_TRANSPARENCY_OPAQUE")]
	public const string GD_EVENT_TRANSPARENCY_OPAQUE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_TRANSPARENCY_TRANSPARENT")]
	public const string GD_EVENT_TRANSPARENCY_TRANSPARENT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_VISIBILITY_CONFIDENTIAL")]
	public const string GD_EVENT_VISIBILITY_CONFIDENTIAL;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_VISIBILITY_DEFAULT")]
	public const string GD_EVENT_VISIBILITY_DEFAULT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_VISIBILITY_PRIVATE")]
	public const string GD_EVENT_VISIBILITY_PRIVATE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_EVENT_VISIBILITY_PUBLIC")]
	public const string GD_EVENT_VISIBILITY_PUBLIC;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_ADDRESS_HOME")]
	public const string GD_IM_ADDRESS_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_ADDRESS_NETMEETING")]
	public const string GD_IM_ADDRESS_NETMEETING;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_ADDRESS_OTHER")]
	public const string GD_IM_ADDRESS_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_ADDRESS_WORK")]
	public const string GD_IM_ADDRESS_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_AIM")]
	public const string GD_IM_PROTOCOL_AIM;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_GOOGLE_TALK")]
	public const string GD_IM_PROTOCOL_GOOGLE_TALK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_ICQ")]
	public const string GD_IM_PROTOCOL_ICQ;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_JABBER")]
	public const string GD_IM_PROTOCOL_JABBER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_LIVE_MESSENGER")]
	public const string GD_IM_PROTOCOL_LIVE_MESSENGER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_QQ")]
	public const string GD_IM_PROTOCOL_QQ;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_SKYPE")]
	public const string GD_IM_PROTOCOL_SKYPE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_IM_PROTOCOL_YAHOO_MESSENGER")]
	public const string GD_IM_PROTOCOL_YAHOO_MESSENGER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_MAIL_CLASS_BOTH")]
	public const string GD_MAIL_CLASS_BOTH;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_MAIL_CLASS_LETTERS")]
	public const string GD_MAIL_CLASS_LETTERS;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_MAIL_CLASS_NEITHER")]
	public const string GD_MAIL_CLASS_NEITHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_MAIL_CLASS_PARCELS")]
	public const string GD_MAIL_CLASS_PARCELS;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_ORGANIZATION_OTHER")]
	public const string GD_ORGANIZATION_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_ORGANIZATION_WORK")]
	public const string GD_ORGANIZATION_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_ASSISTANT")]
	public const string GD_PHONE_NUMBER_ASSISTANT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_CALLBACK")]
	public const string GD_PHONE_NUMBER_CALLBACK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_CAR")]
	public const string GD_PHONE_NUMBER_CAR;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_COMPANY_MAIN")]
	public const string GD_PHONE_NUMBER_COMPANY_MAIN;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_FAX")]
	public const string GD_PHONE_NUMBER_FAX;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_HOME")]
	public const string GD_PHONE_NUMBER_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_HOME_FAX")]
	public const string GD_PHONE_NUMBER_HOME_FAX;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_ISDN")]
	public const string GD_PHONE_NUMBER_ISDN;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_MAIN")]
	public const string GD_PHONE_NUMBER_MAIN;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_MOBILE")]
	public const string GD_PHONE_NUMBER_MOBILE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_OTHER")]
	public const string GD_PHONE_NUMBER_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_OTHER_FAX")]
	public const string GD_PHONE_NUMBER_OTHER_FAX;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_PAGER")]
	public const string GD_PHONE_NUMBER_PAGER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_RADIO")]
	public const string GD_PHONE_NUMBER_RADIO;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_TELEX")]
	public const string GD_PHONE_NUMBER_TELEX;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_TTY_TDD")]
	public const string GD_PHONE_NUMBER_TTY_TDD;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_WORK")]
	public const string GD_PHONE_NUMBER_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_WORK_FAX")]
	public const string GD_PHONE_NUMBER_WORK_FAX;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_WORK_MOBILE")]
	public const string GD_PHONE_NUMBER_WORK_MOBILE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_PHONE_NUMBER_WORK_PAGER")]
	public const string GD_PHONE_NUMBER_WORK_PAGER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_POSTAL_ADDRESS_HOME")]
	public const string GD_POSTAL_ADDRESS_HOME;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_POSTAL_ADDRESS_OTHER")]
	public const string GD_POSTAL_ADDRESS_OTHER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_POSTAL_ADDRESS_WORK")]
	public const string GD_POSTAL_ADDRESS_WORK;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_REMINDER_ALERT")]
	public const string GD_REMINDER_ALERT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_REMINDER_EMAIL")]
	public const string GD_REMINDER_EMAIL;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_REMINDER_SMS")]
	public const string GD_REMINDER_SMS;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHERE_EVENT")]
	public const string GD_WHERE_EVENT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHERE_EVENT_ALTERNATE")]
	public const string GD_WHERE_EVENT_ALTERNATE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHERE_EVENT_PARKING")]
	public const string GD_WHERE_EVENT_PARKING;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHO_EVENT_ATTENDEE")]
	public const string GD_WHO_EVENT_ATTENDEE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHO_EVENT_ORGANIZER")]
	public const string GD_WHO_EVENT_ORGANIZER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHO_EVENT_PERFORMER")]
	public const string GD_WHO_EVENT_PERFORMER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_GD_WHO_EVENT_SPEAKER")]
	public const string GD_WHO_EVENT_SPEAKER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_ACCESS_CONTROL_LIST")]
	public const string LINK_ACCESS_CONTROL_LIST;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_ALTERNATE")]
	public const string LINK_ALTERNATE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_BATCH")]
	public const string LINK_BATCH;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_EDIT")]
	public const string LINK_EDIT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_EDIT_MEDIA")]
	public const string LINK_EDIT_MEDIA;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_ENCLOSURE")]
	public const string LINK_ENCLOSURE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_PARENT")]
	public const string LINK_PARENT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_RELATED")]
	public const string LINK_RELATED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_RESUMABLE_CREATE_MEDIA")]
	public const string LINK_RESUMABLE_CREATE_MEDIA;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_RESUMABLE_EDIT_MEDIA")]
	public const string LINK_RESUMABLE_EDIT_MEDIA;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_SELF")]
	public const string LINK_SELF;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_LINK_VIA")]
	public const string LINK_VIA;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_OAUTH2_REDIRECT_URI_OOB")]
	public const string OAUTH2_REDIRECT_URI_OOB;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_OAUTH2_REDIRECT_URI_OOB_AUTO")]
	public const string OAUTH2_REDIRECT_URI_OOB_AUTO;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_PICASAWEB_VIDEO_STATUS_FAILED")]
	public const string PICASAWEB_VIDEO_STATUS_FAILED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_PICASAWEB_VIDEO_STATUS_FINAL")]
	public const string PICASAWEB_VIDEO_STATUS_FINAL;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_PICASAWEB_VIDEO_STATUS_PENDING")]
	public const string PICASAWEB_VIDEO_STATUS_PENDING;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_PICASAWEB_VIDEO_STATUS_READY")]
	public const string PICASAWEB_VIDEO_STATUS_READY;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_TASKS_STATUS_COMPLETED")]
	public const string TASKS_STATUS_COMPLETED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_TASKS_STATUS_NEEDS_ACTION")]
	public const string TASKS_STATUS_NEEDS_ACTION;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_COMMENT")]
	public const string YOUTUBE_ACTION_COMMENT;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_COMMENT_VOTE")]
	public const string YOUTUBE_ACTION_COMMENT_VOTE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_EMBED")]
	public const string YOUTUBE_ACTION_EMBED;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_RATE")]
	public const string YOUTUBE_ACTION_RATE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_SYNDICATE")]
	public const string YOUTUBE_ACTION_SYNDICATE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ACTION_VIDEO_RESPOND")]
	public const string YOUTUBE_ACTION_VIDEO_RESPOND;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_ASPECT_RATIO_WIDESCREEN")]
	public const string YOUTUBE_ASPECT_RATIO_WIDESCREEN;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_CREDIT_ENTITY_PARTNER")]
	public const string YOUTUBE_CREDIT_ENTITY_PARTNER;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_LICENSE_CC")]
	public const string YOUTUBE_LICENSE_CC;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_LICENSE_STANDARD")]
	public const string YOUTUBE_LICENSE_STANDARD;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_RATING_TYPE_MPAA")]
	public const string YOUTUBE_RATING_TYPE_MPAA;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_RATING_TYPE_SIMPLE")]
	public const string YOUTUBE_RATING_TYPE_SIMPLE;
	[CCode (cheader_filename = "gdata/gdata.h", cname = "GDATA_YOUTUBE_RATING_TYPE_V_CHIP")]
	public const string YOUTUBE_RATING_TYPE_V_CHIP;
}
